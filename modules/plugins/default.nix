{
  lib,
  flake-parts-lib,
  neovim-lib,
  ...
}:
with lib; let
  inherit (builtins) typeOf;
  inherit (flake-parts-lib) mkPerSystemOption;
  inherit (neovim-lib) toLua;

  pluginSpec = with types; {
    options = {
      package = mkOption {
        type = nullOr package;
        default = null;
      };
      name = mkOption {
        type = nullOr str;
        default = null;
      };
      dependencies = mkOption {
        type = listOf package;
        default = [];
      };
      dev = mkOption {
        type = bool;
        default = false;
      };
      config = mkOption {
        type = oneOf [bool path];
        default = false;
      };
      opts = mkOption {
        type = attrs;
        default = {};
      };
      event = mkOption {
        type = nullOr (oneOf [str (listOf str)]);
        default = null;
      };
      ft = mkOption {
        type = nullOr (oneOf [str (listOf str)]);
        default = null;
      };
      keys = mkOption {
        type = nullOr (oneOf [str (listOf str)]);
        default = null;
      };
    };
  };
in {
  options = {
    perSystem = mkPerSystemOption ({
      config,
      pkgs,
      ...
    }: let
      cfg = config.neovim.lazy;
    in {
      options = with types; {
        neovim = {
          lazy = {
            opts = {
              dev = {
                path = mkOption {
                  type = nullOr (oneOf [path str]);
                  default = null;
                };
              };
              install = {
                missing = mkOption {
                  type = bool;
                  default = false;
                };
              };
            };
            plugins = mkOption {
              type = listOf (submodule pluginSpec);
              default = [];
            };
          };

          build = {
            lazy = {
              spec = mkOption {
                type = str;
                internal = true;
              };
              opts = mkOption {
                type = str;
                internal = true;
              };
            };

            plugins = mkOption {
              type = package;
              internal = true;
            };
          };
        };
      };

      config = mkIf (cfg.plugins != []) {
        neovim.build = let
          inherit (config.neovim) build;
        in {
          lazy = let
            toPlugin = p:
              {
                inherit (p) dev opts;
                config =
                  if (typeOf p.config) == "path"
                  then _: ''dofile "${p.config}"''
                  else p.config;
                dependencies =
                  map (dep: {
                    name = dep.pname;
                    dir = "${dep}";
                  })
                  p.dependencies;
              }
              // optionalAttrs (p.package != null) {
                dir = "${p.package}";
                name = p.package.pname;
              }
              // optionalAttrs (p.event != null) {inherit (p) event;}
              // optionalAttrs (p.ft != null) {inherit (p) ft;}
              // optionalAttrs (p.keys != null) {inherit (p) keys;}
              // optionalAttrs (p.name != null) {inherit (p) name;};
            spec = toLua (map toPlugin cfg.plugins);
            opts = toLua (cfg.opts // {performance.rtp.reset = false;});
          in {
            inherit spec opts;
          };

          plugins =
            pkgs.runCommand "plugins.lua" {
              nativeBuildInputs = with pkgs; [stylua];
              passAsFile = ["text"];
              preferLocalBuild = true;
              allowSubstituates = false;
              text = ''
                -- Generated by Nix (via github:willruggiano/neovim.nix)
                require("lazy").setup(${build.lazy.spec}, ${build.lazy.opts})
              '';
            } ''
              target=$out
              mkdir -p "$(dirname "$target")"
              if [ -e "$textPath" ]; then
                mv "$textPath" "$target"
              else
                echo -n "$text" > "$target"
              fi

              stylua --config-path ${../../stylua.toml} $target
            '';
          runtimepath = with pkgs.vimPlugins; [lazy-nvim];
        };
      };
    });
  };
}
