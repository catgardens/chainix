{
  lib,
  flake-parts-lib,
  ...
}:
with lib; let
  inherit (builtins) isFunction typeOf;
  inherit (flake-parts-lib) mkPerSystemOption;

  mkLuaOption = type:
    mkOption {
      type = types.nullOr (types.oneOf [type (types.functionTo type)]);
      default = null;
    };

  toLuaHashMap = v: "{ ${concatStringsSep ", " (mapAttrsToList (name: value: "${name} = ${toLua value}") v)} }";

  toLuaArray = v: "{ ${concatMapStringsSep ", " toLua v} }";

  # TODO: Surely there is a better way?
  toLua = v:
    if (typeOf v) == "string"
    then ''"${v}"''
    else if (typeOf v) == "bool"
    then
      if v
      then "true"
      else "false"
    else if (typeOf v) == "set"
    then toLuaHashMap v
    else if (typeOf v) == "list"
    then toLuaArray v
    else if isFunction v
    then v {}
    else toString v;
in {
  options = {
    perSystem = mkPerSystemOption ({
      config,
      pkgs,
      ...
    }: {
      options = with lib.types; {
        neovim.build = {
          vimGlobals = mkOption {
            internal = true;
            type = package;
          };
        };

        # TODO: Generate these.
        vim.g = {
          mapleader = mkLuaOption str;
          loaded_2html_plugin = mkLuaOption bool;
          loaded_getscript = mkLuaOption bool;
          loaded_getscriptPlugin = mkLuaOption bool;
          loaded_gzip = mkLuaOption bool;
          loaded_logiPat = mkLuaOption bool;
          loaded_matchit = mkLuaOption bool;
          loaded_matchparen = mkLuaOption bool;
          loaded_netrw = mkLuaOption bool;
          loaded_netrwPlugin = mkLuaOption bool;
          loaded_netrwSettings = mkLuaOption bool;
          loaded_rrhelper = mkLuaOption bool;
          loaded_tar = mkLuaOption bool;
          loaded_tarPlugin = mkLuaOption bool;
          loaded_vimball = mkLuaOption bool;
          loaded_vimballPlugin = mkLuaOption bool;
          loaded_zip = mkLuaOption bool;
          loaded_zipPlugin = mkLuaOption bool;
        };
      };

      config = {
        neovim.build.vimGlobals = let
          opts =
            mapAttrsToList (
              name: value: ''
                vim.g.${name} = ${toLua value}
              ''
            )
            (filterAttrs (_: value: value != null) config.vim.g);

          mod = pkgs.writeText "globals.lua" ''
            -- Generated by Nix.
            ${concatStringsSep "\n" opts}
          '';
        in
          # TODO: Either this...
          pkgs.runCommandLocal "globals.lua" {} ''
            ln -s ${mod} $out
          '';
        # ... or this? What do we think is better?
        # pkgs.stdenvNoCC.mkDerivation {
        #   name = "neovim-options";

        #   dontUnpack = true;
        #   dontConfigure = true;
        #   dontBuild = true;

        #   installPhase = ''
        #     runHook preInstall
        #     mkdir -p $out/lua/neovim-nix
        #     ln -s ${mod} $out/lua/neovim-nix/options.lua
        #     runHook postInstall
        #   '';
        # };
      };
    });
  };
}
