{
  lib,
  flake-parts-lib,
  neovim-lib,
  ...
}: let
  inherit (lib) concatStringsSep filterAttrs mapAttrsToList mkOption;
  inherit (flake-parts-lib) mkPerSystemOption;
  inherit (neovim-lib) mkLuaOption toLua;
in {
  options = {
    perSystem = mkPerSystemOption ({
      config,
      pkgs,
      ...
    }: {
      options = with lib.types; {
        neovim.build = {
          options = mkOption {
            internal = true;
            type = package;
          };
        };

        # TODO: Generate these.
        vim.opt = {
          autoindent = mkLuaOption bool;
          belloff = mkLuaOption str;
          breakindent = mkLuaOption bool;
          cindent = mkLuaOption bool;
          clipboard = mkLuaOption str;
          cmdheight = mkLuaOption int;
          conceallevel = mkLuaOption int;
          cursorline = mkLuaOption bool;
          equalalways = mkLuaOption bool;
          expandtab = mkLuaOption bool;
          exrc = mkLuaOption bool;
          fillchars = mkLuaOption attrs;
          foldenable = mkLuaOption bool;
          foldlevel = mkLuaOption int;
          formatoptions = mkLuaOption str;
          grepprg = mkLuaOption str;
          hidden = mkLuaOption bool;
          hlsearch = mkLuaOption bool;
          ignorecase = mkLuaOption bool;
          inccommand = mkLuaOption str;
          incsearch = mkLuaOption bool;
          keywordprg = mkLuaOption str;
          linebreak = mkLuaOption bool;
          listchars = mkLuaOption attrs;
          modelines = mkLuaOption int;
          mouse = mkLuaOption str;
          number = mkLuaOption bool;
          pumblend = mkLuaOption int;
          relativenumber = mkLuaOption bool;
          scrolloff = mkLuaOption int;
          secure = mkLuaOption bool;
          shada = mkLuaOption (listOf str);
          shiftwidth = mkLuaOption int;
          shortmess = mkLuaOption str;
          showbreak = mkLuaOption str;
          showcmd = mkLuaOption bool;
          showmatch = mkLuaOption bool;
          showmode = mkLuaOption bool;
          signcolumn = mkLuaOption str;
          smartcase = mkLuaOption bool;
          softtabstop = mkLuaOption int;
          splitbelow = mkLuaOption bool;
          splitright = mkLuaOption bool;
          swapfile = mkLuaOption bool;
          tabstop = mkLuaOption int;
          termguicolors = mkLuaOption bool;
          timeoutlen = mkLuaOption int;
          updatetime = mkLuaOption int;
          wildignore = mkLuaOption (listOf str);
          wildmode = mkLuaOption (listOf str);
          wildoptions = mkLuaOption str;
          wrap = mkLuaOption bool;
        };
      };

      config = {
        neovim.build.options = let
          opts =
            mapAttrsToList (
              name: value: ''
                vim.opt.${name} = ${toLua value}
              ''
            )
            (filterAttrs (_: value: value != null) config.vim.opt);
        in
          pkgs.writeTextFile {
            name = "options.lua";
            text =
              ''
                -- Generated by Nix (via github:willruggiano/neovim.nix)
              ''
              + (concatStringsSep "\n" opts);
          };
      };
    });
  };
}
